
Display_4D_Genie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf0  08002cf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cf8  08002cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002d0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002d0c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfe5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000198a  00000000  00000000  0002c019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002e248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a46f  00000000  00000000  0002ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad9d  00000000  00000000  00048ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aba93  00000000  00000000  00053c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff6ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de8  00000000  00000000  000ff744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002c50 	.word	0x08002c50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002c50 	.word	0x08002c50

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 f9c2 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f805 	bl	8000632 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8b0 	bl	800078c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f860 	bl	80006f0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x14>

08000632 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b0a7      	sub	sp, #156	; 0x9c
 8000636:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000638:	245c      	movs	r4, #92	; 0x5c
 800063a:	193b      	adds	r3, r7, r4
 800063c:	0018      	movs	r0, r3
 800063e:	233c      	movs	r3, #60	; 0x3c
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f002 fafc 	bl	8002c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	234c      	movs	r3, #76	; 0x4c
 800064a:	18fb      	adds	r3, r7, r3
 800064c:	0018      	movs	r0, r3
 800064e:	2310      	movs	r3, #16
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f002 faf4 	bl	8002c40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	003b      	movs	r3, r7
 800065a:	0018      	movs	r0, r3
 800065c:	234c      	movs	r3, #76	; 0x4c
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f002 faed 	bl	8002c40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fc76 	bl	8000f5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2202      	movs	r2, #2
 8000674:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2240      	movs	r2, #64	; 0x40
 8000688:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	193b      	adds	r3, r7, r4
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fcae 	bl	8000ff4 <HAL_RCC_OscConfig>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800069c:	f000 f8c6 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	214c      	movs	r1, #76	; 0x4c
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2207      	movs	r2, #7
 80006a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2100      	movs	r1, #0
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fffe 	bl	80016c0 <HAL_RCC_ClockConfig>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c8:	f000 f8b0 	bl	800082c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2202      	movs	r2, #2
 80006d0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	003b      	movs	r3, r7
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 f99a 	bl	8001a14 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006e4:	f000 f8a2 	bl	800082c <Error_Handler>
  }
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b027      	add	sp, #156	; 0x9c
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_USART2_UART_Init+0x94>)
 80006f6:	4a24      	ldr	r2, [pc, #144]	; (8000788 <MX_USART2_UART_Init+0x98>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_USART2_UART_Init+0x94>)
 80006fc:	22e1      	movs	r2, #225	; 0xe1
 80006fe:	0252      	lsls	r2, r2, #9
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_USART2_UART_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_USART2_UART_Init+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_USART2_UART_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_USART2_UART_Init+0x94>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_USART2_UART_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_USART2_UART_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_USART2_UART_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_USART2_UART_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART2_UART_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_USART2_UART_Init+0x94>)
 800073a:	0018      	movs	r0, r3
 800073c:	f001 fba6 	bl	8001e8c <HAL_UART_Init>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 f872 	bl	800082c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x94>)
 800074a:	2100      	movs	r1, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f002 f973 	bl	8002a38 <HAL_UARTEx_SetTxFifoThreshold>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000756:	f000 f869 	bl	800082c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_USART2_UART_Init+0x94>)
 800075c:	2100      	movs	r1, #0
 800075e:	0018      	movs	r0, r3
 8000760:	f002 f9aa 	bl	8002ab8 <HAL_UARTEx_SetRxFifoThreshold>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000768:	f000 f860 	bl	800082c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x94>)
 800076e:	0018      	movs	r0, r3
 8000770:	f002 f928 	bl	80029c4 <HAL_UARTEx_DisableFifoMode>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000778:	f000 f858 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000028 	.word	0x20000028
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	240c      	movs	r4, #12
 8000794:	193b      	adds	r3, r7, r4
 8000796:	0018      	movs	r0, r3
 8000798:	2314      	movs	r3, #20
 800079a:	001a      	movs	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f002 fa4f 	bl	8002c40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007a8:	2104      	movs	r1, #4
 80007aa:	430a      	orrs	r2, r1
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b2:	2204      	movs	r2, #4
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007c0:	2120      	movs	r1, #32
 80007c2:	430a      	orrs	r2, r1
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ca:	2220      	movs	r2, #32
 80007cc:	4013      	ands	r3, r2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007d8:	2101      	movs	r1, #1
 80007da:	430a      	orrs	r2, r1
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e2:	2201      	movs	r2, #1
 80007e4:	4013      	ands	r3, r2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007ea:	23a0      	movs	r3, #160	; 0xa0
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fb94 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80007f8:	0021      	movs	r1, r4
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2220      	movs	r2, #32
 80007fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2201      	movs	r2, #1
 8000804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2202      	movs	r2, #2
 8000810:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000812:	187a      	adds	r2, r7, r1
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fa14 	bl	8000c48 <HAL_GPIO_Init>

}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b009      	add	sp, #36	; 0x24
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	40021000 	.word	0x40021000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_MspInit+0x4c>)
 8000840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	2101      	movs	r1, #1
 8000846:	430a      	orrs	r2, r1
 8000848:	641a      	str	r2, [r3, #64]	; 0x40
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	2201      	movs	r2, #1
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_MspInit+0x4c>)
 8000858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_MspInit+0x4c>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0549      	lsls	r1, r1, #21
 8000860:	430a      	orrs	r2, r1
 8000862:	63da      	str	r2, [r3, #60]	; 0x3c
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <HAL_MspInit+0x4c>)
 8000866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	055b      	lsls	r3, r3, #21
 800086c:	4013      	ands	r3, r2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000872:	23c0      	movs	r3, #192	; 0xc0
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f91c 	bl	8000ab4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b08b      	sub	sp, #44	; 0x2c
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	2414      	movs	r4, #20
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f002 f9d0 	bl	8002c40 <memset>
  if(huart->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <HAL_UART_MspInit+0x8c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d130      	bne.n	800090c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <HAL_UART_MspInit+0x90>)
 80008ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_UART_MspInit+0x90>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0289      	lsls	r1, r1, #10
 80008b4:	430a      	orrs	r2, r1
 80008b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_UART_MspInit+0x90>)
 80008ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	029b      	lsls	r3, r3, #10
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_UART_MspInit+0x90>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_UART_MspInit+0x90>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x90>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80008de:	0021      	movs	r1, r4
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2201      	movs	r2, #1
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	187a      	adds	r2, r7, r1
 8000900:	23a0      	movs	r3, #160	; 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f99e 	bl	8000c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b00b      	add	sp, #44	; 0x2c
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 f89c 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000956:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000958:	f7ff fff7 	bl	800094a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	; (8000994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	; (80009a0 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000982:	f002 f939 	bl	8002bf8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000986:	f7ff fe49 	bl	800061c <main>

0800098a <LoopForever>:

LoopForever:
  b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   r0, =_estack
 800098c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000998:	08002d00 	.word	0x08002d00
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a0:	200000bc 	.word	0x200000bc

080009a4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_COMP_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_Init+0x3c>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_Init+0x3c>)
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	0049      	lsls	r1, r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f810 	bl	80009e8 <HAL_InitTick>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e001      	b.n	80009d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff ff30 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_InitTick+0x88>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d02b      	beq.n	8000a58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_InitTick+0x8c>)
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_InitTick+0x88>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	0019      	movs	r1, r3
 8000a0a:	23fa      	movs	r3, #250	; 0xfa
 8000a0c:	0098      	lsls	r0, r3, #2
 8000a0e:	f7ff fb79 	bl	8000104 <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	0019      	movs	r1, r3
 8000a16:	0020      	movs	r0, r4
 8000a18:	f7ff fb74 	bl	8000104 <__udivsi3>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f905 	bl	8000c2e <HAL_SYSTICK_Config>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d112      	bne.n	8000a4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d80a      	bhi.n	8000a44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 f8e4 	bl	8000c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_InitTick+0x90>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e00d      	b.n	8000a60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a44:	230f      	movs	r3, #15
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e008      	b.n	8000a60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e003      	b.n	8000a60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a58:	230f      	movs	r3, #15
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a60:	230f      	movs	r3, #15
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	781b      	ldrb	r3, [r3, #0]
}
 8000a66:	0018      	movs	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b005      	add	sp, #20
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	001a      	movs	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	18d2      	adds	r2, r2, r3
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	200000b8 	.word	0x200000b8

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	200000b8 	.word	0x200000b8

08000ab4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	430a      	orrs	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	fffff9ff 	.word	0xfffff9ff

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b7f      	cmp	r3, #127	; 0x7f
 8000af4:	d828      	bhi.n	8000b48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af6:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <__NVIC_SetPriority+0xd4>)
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	33c0      	adds	r3, #192	; 0xc0
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	589b      	ldr	r3, [r3, r2]
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	400a      	ands	r2, r1
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	21ff      	movs	r1, #255	; 0xff
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	401a      	ands	r2, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4003      	ands	r3, r0
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <__NVIC_SetPriority+0xd4>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	33c0      	adds	r3, #192	; 0xc0
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b46:	e031      	b.n	8000bac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <__NVIC_SetPriority+0xd8>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0019      	movs	r1, r3
 8000b50:	230f      	movs	r3, #15
 8000b52:	400b      	ands	r3, r1
 8000b54:	3b08      	subs	r3, #8
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	3306      	adds	r3, #6
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	3304      	adds	r3, #4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1dfa      	adds	r2, r7, #7
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	0011      	movs	r1, r2
 8000b68:	2203      	movs	r2, #3
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	00d2      	lsls	r2, r2, #3
 8000b6e:	21ff      	movs	r1, #255	; 0xff
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	401a      	ands	r2, r3
 8000b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	019b      	lsls	r3, r3, #6
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	401a      	ands	r2, r3
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	0018      	movs	r0, r3
 8000b88:	2303      	movs	r3, #3
 8000b8a:	4003      	ands	r3, r0
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001c      	movs	r4, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	4023      	ands	r3, r4
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	18c3      	adds	r3, r0, r3
 8000ba8:	3304      	adds	r3, #4
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	045b      	lsls	r3, r3, #17
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d301      	bcc.n	8000bd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e010      	b.n	8000bf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <SysTick_Config+0x44>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bdc:	2301      	movs	r3, #1
 8000bde:	425b      	negs	r3, r3
 8000be0:	2103      	movs	r1, #3
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff ff7c 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SysTick_Config+0x44>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x44>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	210f      	movs	r1, #15
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	1c02      	adds	r2, r0, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ffbf 	bl	8000bbc <SysTick_Config>
 8000c3e:	0003      	movs	r3, r0
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e14d      	b.n	8000ef4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d100      	bne.n	8000c70 <HAL_GPIO_Init+0x28>
 8000c6e:	e13e      	b.n	8000eee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2203      	movs	r2, #3
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d005      	beq.n	8000c88 <HAL_GPIO_Init+0x40>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2203      	movs	r2, #3
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d130      	bne.n	8000cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	409a      	lsls	r2, r3
 8000c96:	0013      	movs	r3, r2
 8000c98:	43da      	mvns	r2, r3
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2203      	movs	r2, #3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d017      	beq.n	8000d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	43da      	mvns	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d123      	bne.n	8000d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	58d3      	ldr	r3, [r2, r3]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2207      	movs	r2, #7
 8000d44:	4013      	ands	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	691a      	ldr	r2, [r3, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	400b      	ands	r3, r1
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	0092      	lsls	r2, r2, #2
 8000d76:	6939      	ldr	r1, [r7, #16]
 8000d78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2203      	movs	r2, #3
 8000d98:	401a      	ands	r2, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	029b      	lsls	r3, r3, #10
 8000db6:	4013      	ands	r3, r2
 8000db8:	d100      	bne.n	8000dbc <HAL_GPIO_Init+0x174>
 8000dba:	e098      	b.n	8000eee <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dbc:	4a53      	ldr	r2, [pc, #332]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3318      	adds	r3, #24
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	589b      	ldr	r3, [r3, r2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4013      	ands	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	23a0      	movs	r3, #160	; 0xa0
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d019      	beq.n	8000e1e <HAL_GPIO_Init+0x1d6>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a48      	ldr	r2, [pc, #288]	; (8000f10 <HAL_GPIO_Init+0x2c8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_GPIO_Init+0x1d2>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a47      	ldr	r2, [pc, #284]	; (8000f14 <HAL_GPIO_Init+0x2cc>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d00d      	beq.n	8000e16 <HAL_GPIO_Init+0x1ce>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a46      	ldr	r2, [pc, #280]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d007      	beq.n	8000e12 <HAL_GPIO_Init+0x1ca>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a45      	ldr	r2, [pc, #276]	; (8000f1c <HAL_GPIO_Init+0x2d4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_GPIO_Init+0x1c6>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	e008      	b.n	8000e20 <HAL_GPIO_Init+0x1d8>
 8000e0e:	2305      	movs	r3, #5
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x1d8>
 8000e12:	2303      	movs	r3, #3
 8000e14:	e004      	b.n	8000e20 <HAL_GPIO_Init+0x1d8>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_Init+0x1d8>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x1d8>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	2103      	movs	r1, #3
 8000e24:	400a      	ands	r2, r1
 8000e26:	00d2      	lsls	r2, r2, #3
 8000e28:	4093      	lsls	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e30:	4936      	ldr	r1, [pc, #216]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3318      	adds	r3, #24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e3e:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	58d3      	ldr	r3, [r2, r3]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43da      	mvns	r2, r3
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	025b      	lsls	r3, r3, #9
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e64:	4929      	ldr	r1, [pc, #164]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000e6e:	2384      	movs	r3, #132	; 0x84
 8000e70:	58d3      	ldr	r3, [r2, r3]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	029b      	lsls	r3, r3, #10
 8000e86:	4013      	ands	r3, r2
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e92:	491e      	ldr	r1, [pc, #120]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000e94:	2284      	movs	r2, #132	; 0x84
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	035b      	lsls	r3, r3, #13
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	039b      	lsls	r3, r3, #14
 8000edc:	4013      	ands	r3, r2
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	40da      	lsrs	r2, r3
 8000efc:	1e13      	subs	r3, r2, #0
 8000efe:	d000      	beq.n	8000f02 <HAL_GPIO_Init+0x2ba>
 8000f00:	e6aa      	b.n	8000c58 <HAL_GPIO_Init+0x10>
  }
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b006      	add	sp, #24
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	50000400 	.word	0x50000400
 8000f14:	50000800 	.word	0x50000800
 8000f18:	50000c00 	.word	0x50000c00
 8000f1c:	50001000 	.word	0x50001000

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	0008      	movs	r0, r1
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	1cbb      	adds	r3, r7, #2
 8000f2e:	1c02      	adds	r2, r0, #0
 8000f30:	801a      	strh	r2, [r3, #0]
 8000f32:	1c7b      	adds	r3, r7, #1
 8000f34:	1c0a      	adds	r2, r1, #0
 8000f36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f38:	1c7b      	adds	r3, r7, #1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	881a      	ldrh	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f48:	e003      	b.n	8000f52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4a:	1cbb      	adds	r3, r7, #2
 8000f4c:	881a      	ldrh	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d11f      	bne.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	0013      	movs	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	189b      	adds	r3, r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4912      	ldr	r1, [pc, #72]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff f8b8 	bl	8000104 <__udivsi3>
 8000f94:	0003      	movs	r3, r0
 8000f96:	3301      	adds	r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f9a:	e008      	b.n	8000fae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e001      	b.n	8000fae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e009      	b.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d0ed      	beq.n	8000f9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	40007000 	.word	0x40007000
 8000fd0:	fffff9ff 	.word	0xfffff9ff
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	000f4240 	.word	0x000f4240

08000fdc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	23e0      	movs	r3, #224	; 0xe0
 8000fe6:	01db      	lsls	r3, r3, #7
 8000fe8:	4013      	ands	r3, r2
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	f000 fb56 	bl	80016b4 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	4013      	ands	r3, r2
 8001010:	d100      	bne.n	8001014 <HAL_RCC_OscConfig+0x20>
 8001012:	e07d      	b.n	8001110 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001014:	4bc3      	ldr	r3, [pc, #780]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2238      	movs	r2, #56	; 0x38
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800101e:	4bc1      	ldr	r3, [pc, #772]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2203      	movs	r2, #3
 8001024:	4013      	ands	r3, r2
 8001026:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	2b10      	cmp	r3, #16
 800102c:	d102      	bne.n	8001034 <HAL_RCC_OscConfig+0x40>
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d002      	beq.n	800103a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b08      	cmp	r3, #8
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103a:	4bba      	ldr	r3, [pc, #744]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d063      	beq.n	800110e <HAL_RCC_OscConfig+0x11a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d15f      	bne.n	800110e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f000 fb30 	bl	80016b4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	025b      	lsls	r3, r3, #9
 800105c:	429a      	cmp	r2, r3
 800105e:	d107      	bne.n	8001070 <HAL_RCC_OscConfig+0x7c>
 8001060:	4bb0      	ldr	r3, [pc, #704]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4baf      	ldr	r3, [pc, #700]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	0249      	lsls	r1, r1, #9
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e020      	b.n	80010b2 <HAL_RCC_OscConfig+0xbe>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	02db      	lsls	r3, r3, #11
 8001078:	429a      	cmp	r2, r3
 800107a:	d10e      	bne.n	800109a <HAL_RCC_OscConfig+0xa6>
 800107c:	4ba9      	ldr	r3, [pc, #676]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4ba8      	ldr	r3, [pc, #672]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	02c9      	lsls	r1, r1, #11
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	4ba6      	ldr	r3, [pc, #664]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4ba5      	ldr	r3, [pc, #660]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	0249      	lsls	r1, r1, #9
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e00b      	b.n	80010b2 <HAL_RCC_OscConfig+0xbe>
 800109a:	4ba2      	ldr	r3, [pc, #648]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4ba1      	ldr	r3, [pc, #644]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80010a0:	49a1      	ldr	r1, [pc, #644]	; (8001328 <HAL_RCC_OscConfig+0x334>)
 80010a2:	400a      	ands	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	4b9f      	ldr	r3, [pc, #636]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b9e      	ldr	r3, [pc, #632]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80010ac:	499f      	ldr	r1, [pc, #636]	; (800132c <HAL_RCC_OscConfig+0x338>)
 80010ae:	400a      	ands	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d014      	beq.n	80010e4 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ba:	f7ff fcf1 	bl	8000aa0 <HAL_GetTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fcec 	bl	8000aa0 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e2ee      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d6:	4b93      	ldr	r3, [pc, #588]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	029b      	lsls	r3, r3, #10
 80010de:	4013      	ands	r3, r2
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0xd0>
 80010e2:	e015      	b.n	8001110 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff fcdc 	bl	8000aa0 <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ee:	f7ff fcd7 	bl	8000aa0 <HAL_GetTick>
 80010f2:	0002      	movs	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b64      	cmp	r3, #100	; 0x64
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e2d9      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001100:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	029b      	lsls	r3, r3, #10
 8001108:	4013      	ands	r3, r2
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0xfa>
 800110c:	e000      	b.n	8001110 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2202      	movs	r2, #2
 8001116:	4013      	ands	r3, r2
 8001118:	d100      	bne.n	800111c <HAL_RCC_OscConfig+0x128>
 800111a:	e099      	b.n	8001250 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800111c:	4b81      	ldr	r3, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2238      	movs	r2, #56	; 0x38
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001126:	4b7f      	ldr	r3, [pc, #508]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2203      	movs	r2, #3
 800112c:	4013      	ands	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d102      	bne.n	800113c <HAL_RCC_OscConfig+0x148>
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d002      	beq.n	8001142 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d135      	bne.n	80011ae <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001142:	4b78      	ldr	r3, [pc, #480]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4013      	ands	r3, r2
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x166>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e2ac      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b72      	ldr	r3, [pc, #456]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a74      	ldr	r2, [pc, #464]	; (8001330 <HAL_RCC_OscConfig+0x33c>)
 8001160:	4013      	ands	r3, r2
 8001162:	0019      	movs	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	021a      	lsls	r2, r3, #8
 800116a:	4b6e      	ldr	r3, [pc, #440]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800116c:	430a      	orrs	r2, r1
 800116e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001176:	4b6b      	ldr	r3, [pc, #428]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6e      	ldr	r2, [pc, #440]	; (8001334 <HAL_RCC_OscConfig+0x340>)
 800117c:	4013      	ands	r3, r2
 800117e:	0019      	movs	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	4b67      	ldr	r3, [pc, #412]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800118a:	4b66      	ldr	r3, [pc, #408]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0adb      	lsrs	r3, r3, #11
 8001190:	2207      	movs	r2, #7
 8001192:	4013      	ands	r3, r2
 8001194:	4a68      	ldr	r2, [pc, #416]	; (8001338 <HAL_RCC_OscConfig+0x344>)
 8001196:	40da      	lsrs	r2, r3
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x348>)
 800119a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800119c:	4b68      	ldr	r3, [pc, #416]	; (8001340 <HAL_RCC_OscConfig+0x34c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff fc21 	bl	80009e8 <HAL_InitTick>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d051      	beq.n	800124e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e282      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d030      	beq.n	8001218 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011b6:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a5e      	ldr	r2, [pc, #376]	; (8001334 <HAL_RCC_OscConfig+0x340>)
 80011bc:	4013      	ands	r3, r2
 80011be:	0019      	movs	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	4b57      	ldr	r3, [pc, #348]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011ca:	4b56      	ldr	r3, [pc, #344]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b55      	ldr	r3, [pc, #340]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	0049      	lsls	r1, r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc62 	bl	8000aa0 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc5d 	bl	8000aa0 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e25f      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f4:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b48      	ldr	r3, [pc, #288]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <HAL_RCC_OscConfig+0x33c>)
 8001206:	4013      	ands	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	021a      	lsls	r2, r3, #8
 8001210:	4b44      	ldr	r3, [pc, #272]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001212:	430a      	orrs	r2, r1
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	e01b      	b.n	8001250 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001218:	4b42      	ldr	r3, [pc, #264]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800121e:	4949      	ldr	r1, [pc, #292]	; (8001344 <HAL_RCC_OscConfig+0x350>)
 8001220:	400a      	ands	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc3c 	bl	8000aa0 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fc37 	bl	8000aa0 <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e239      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001240:	4b38      	ldr	r3, [pc, #224]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4013      	ands	r3, r2
 800124a:	d1f0      	bne.n	800122e <HAL_RCC_OscConfig+0x23a>
 800124c:	e000      	b.n	8001250 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2208      	movs	r2, #8
 8001256:	4013      	ands	r3, r2
 8001258:	d047      	beq.n	80012ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2238      	movs	r2, #56	; 0x38
 8001260:	4013      	ands	r3, r2
 8001262:	2b18      	cmp	r3, #24
 8001264:	d10a      	bne.n	800127c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d03c      	beq.n	80012ea <HAL_RCC_OscConfig+0x2f6>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d138      	bne.n	80012ea <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e21b      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d019      	beq.n	80012b8 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001286:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800128a:	2101      	movs	r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc06 	bl	8000aa0 <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fc01 	bl	8000aa0 <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e203      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80012ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b0:	2202      	movs	r2, #2
 80012b2:	4013      	ands	r3, r2
 80012b4:	d0f1      	beq.n	800129a <HAL_RCC_OscConfig+0x2a6>
 80012b6:	e018      	b.n	80012ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80012ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80012be:	2101      	movs	r1, #1
 80012c0:	438a      	bics	r2, r1
 80012c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fbec 	bl	8000aa0 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fbe7 	bl	8000aa0 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1e9      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 80012e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e4:	2202      	movs	r2, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f1      	bne.n	80012ce <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2204      	movs	r2, #4
 80012f0:	4013      	ands	r3, r2
 80012f2:	d100      	bne.n	80012f6 <HAL_RCC_OscConfig+0x302>
 80012f4:	e0c6      	b.n	8001484 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f6:	231f      	movs	r3, #31
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2238      	movs	r2, #56	; 0x38
 8001304:	4013      	ands	r3, r2
 8001306:	2b20      	cmp	r3, #32
 8001308:	d11e      	bne.n	8001348 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_RCC_OscConfig+0x330>)
 800130c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130e:	2202      	movs	r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	d100      	bne.n	8001316 <HAL_RCC_OscConfig+0x322>
 8001314:	e0b6      	b.n	8001484 <HAL_RCC_OscConfig+0x490>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d000      	beq.n	8001320 <HAL_RCC_OscConfig+0x32c>
 800131e:	e0b1      	b.n	8001484 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e1c7      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
 8001324:	40021000 	.word	0x40021000
 8001328:	fffeffff 	.word	0xfffeffff
 800132c:	fffbffff 	.word	0xfffbffff
 8001330:	ffff80ff 	.word	0xffff80ff
 8001334:	ffffc7ff 	.word	0xffffc7ff
 8001338:	00f42400 	.word	0x00f42400
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004
 8001344:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001348:	4bb8      	ldr	r3, [pc, #736]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800134a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	055b      	lsls	r3, r3, #21
 8001350:	4013      	ands	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_RCC_OscConfig+0x364>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x366>
 8001358:	2300      	movs	r3, #0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d011      	beq.n	8001382 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4bb3      	ldr	r3, [pc, #716]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001362:	4bb2      	ldr	r3, [pc, #712]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	0549      	lsls	r1, r1, #21
 8001368:	430a      	orrs	r2, r1
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
 800136c:	4baf      	ldr	r3, [pc, #700]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800136e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	055b      	lsls	r3, r3, #21
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800137a:	231f      	movs	r3, #31
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001382:	4bab      	ldr	r3, [pc, #684]	; (8001630 <HAL_RCC_OscConfig+0x63c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4013      	ands	r3, r2
 800138c:	d11a      	bne.n	80013c4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800138e:	4ba8      	ldr	r3, [pc, #672]	; (8001630 <HAL_RCC_OscConfig+0x63c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4ba7      	ldr	r3, [pc, #668]	; (8001630 <HAL_RCC_OscConfig+0x63c>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0049      	lsls	r1, r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800139c:	f7ff fb80 	bl	8000aa0 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fb7b 	bl	8000aa0 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e17d      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b8:	4b9d      	ldr	r3, [pc, #628]	; (8001630 <HAL_RCC_OscConfig+0x63c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x3e6>
 80013cc:	4b97      	ldr	r3, [pc, #604]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80013ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013d0:	4b96      	ldr	r3, [pc, #600]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x420>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x408>
 80013e2:	4b92      	ldr	r3, [pc, #584]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80013e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013e6:	4b91      	ldr	r3, [pc, #580]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80013e8:	2104      	movs	r1, #4
 80013ea:	430a      	orrs	r2, r1
 80013ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80013ee:	4b8f      	ldr	r3, [pc, #572]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80013f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013f2:	4b8e      	ldr	r3, [pc, #568]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	430a      	orrs	r2, r1
 80013f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x420>
 80013fc:	4b8b      	ldr	r3, [pc, #556]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80013fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001400:	4b8a      	ldr	r3, [pc, #552]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001402:	2101      	movs	r1, #1
 8001404:	438a      	bics	r2, r1
 8001406:	65da      	str	r2, [r3, #92]	; 0x5c
 8001408:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800140a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800140c:	4b87      	ldr	r3, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800140e:	2104      	movs	r1, #4
 8001410:	438a      	bics	r2, r1
 8001412:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d014      	beq.n	8001446 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fb40 	bl	8000aa0 <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001424:	e009      	b.n	800143a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fb3b 	bl	8000aa0 <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	4a80      	ldr	r2, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x640>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e13c      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800143a:	4b7c      	ldr	r3, [pc, #496]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800143c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143e:	2202      	movs	r2, #2
 8001440:	4013      	ands	r3, r2
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x432>
 8001444:	e013      	b.n	800146e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fb2b 	bl	8000aa0 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800144e:	e009      	b.n	8001464 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff fb26 	bl	8000aa0 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	4a76      	ldr	r2, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x640>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e127      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001464:	4b71      	ldr	r3, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001468:	2202      	movs	r2, #2
 800146a:	4013      	ands	r3, r2
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800146e:	231f      	movs	r3, #31
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800147a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800147c:	4b6b      	ldr	r3, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800147e:	496e      	ldr	r1, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x644>)
 8001480:	400a      	ands	r2, r1
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2220      	movs	r2, #32
 800148a:	4013      	ands	r3, r2
 800148c:	d039      	beq.n	8001502 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01b      	beq.n	80014ce <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	03c9      	lsls	r1, r1, #15
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fafc 	bl	8000aa0 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ae:	f7ff faf7 	bl	8000aa0 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0f9      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014c0:	4b5a      	ldr	r3, [pc, #360]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	041b      	lsls	r3, r3, #16
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x4ba>
 80014cc:	e019      	b.n	8001502 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80014d4:	4959      	ldr	r1, [pc, #356]	; (800163c <HAL_RCC_OscConfig+0x648>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014da:	f7ff fae1 	bl	8000aa0 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014e4:	f7ff fadc 	bl	8000aa0 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0de      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80014f6:	4b4d      	ldr	r3, [pc, #308]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d100      	bne.n	800150c <HAL_RCC_OscConfig+0x518>
 800150a:	e0d2      	b.n	80016b2 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150c:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2238      	movs	r2, #56	; 0x38
 8001512:	4013      	ands	r3, r2
 8001514:	2b10      	cmp	r3, #16
 8001516:	d100      	bne.n	800151a <HAL_RCC_OscConfig+0x526>
 8001518:	e081      	b.n	800161e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d156      	bne.n	80015d0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001528:	4945      	ldr	r1, [pc, #276]	; (8001640 <HAL_RCC_OscConfig+0x64c>)
 800152a:	400a      	ands	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fab7 	bl	8000aa0 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fab2 	bl	8000aa0 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0b4      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	049b      	lsls	r3, r3, #18
 8001552:	4013      	ands	r3, r2
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001556:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x650>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001582:	431a      	orrs	r2, r3
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001586:	430a      	orrs	r2, r1
 8001588:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0449      	lsls	r1, r1, #17
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_RCC_OscConfig+0x638>)
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	0549      	lsls	r1, r1, #21
 80015a2:	430a      	orrs	r2, r1
 80015a4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff fa7b 	bl	8000aa0 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fa76 	bl	8000aa0 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e078      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	049b      	lsls	r3, r3, #18
 80015ca:	4013      	ands	r3, r2
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x5bc>
 80015ce:	e070      	b.n	80016b2 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80015d6:	491a      	ldr	r1, [pc, #104]	; (8001640 <HAL_RCC_OscConfig+0x64c>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80015e2:	2103      	movs	r1, #3
 80015e4:	438a      	bics	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_RCC_OscConfig+0x638>)
 80015ee:	4916      	ldr	r1, [pc, #88]	; (8001648 <HAL_RCC_OscConfig+0x654>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fa54 	bl	8000aa0 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fa4f 	bl	8000aa0 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e051      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_RCC_OscConfig+0x638>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	049b      	lsls	r3, r3, #18
 8001618:	4013      	ands	r3, r2
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x60a>
 800161c:	e049      	b.n	80016b2 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d112      	bne.n	800164c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e044      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40021000 	.word	0x40021000
 8001630:	40007000 	.word	0x40007000
 8001634:	00001388 	.word	0x00001388
 8001638:	efffffff 	.word	0xefffffff
 800163c:	ffbfffff 	.word	0xffbfffff
 8001640:	feffffff 	.word	0xfeffffff
 8001644:	11c1808c 	.word	0x11c1808c
 8001648:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x6c8>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2203      	movs	r2, #3
 8001656:	401a      	ands	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	429a      	cmp	r2, r3
 800165e:	d126      	bne.n	80016ae <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2270      	movs	r2, #112	; 0x70
 8001664:	401a      	ands	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d11f      	bne.n	80016ae <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	23fe      	movs	r3, #254	; 0xfe
 8001672:	01db      	lsls	r3, r3, #7
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d116      	bne.n	80016ae <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	23f8      	movs	r3, #248	; 0xf8
 8001684:	039b      	lsls	r3, r3, #14
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d10e      	bne.n	80016ae <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	23e0      	movs	r3, #224	; 0xe0
 8001694:	051b      	lsls	r3, r3, #20
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	0f5b      	lsrs	r3, r3, #29
 80016a4:	075a      	lsls	r2, r3, #29
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b008      	add	sp, #32
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0e9      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_RCC_ClockConfig+0x1f0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2207      	movs	r2, #7
 80016da:	4013      	ands	r3, r2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d91e      	bls.n	8001720 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2207      	movs	r2, #7
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016f4:	f7ff f9d4 	bl	8000aa0 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016fc:	e009      	b.n	8001712 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fe:	f7ff f9cf 	bl	8000aa0 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a6a      	ldr	r2, [pc, #424]	; (80018b4 <HAL_RCC_ClockConfig+0x1f4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0ca      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2207      	movs	r2, #7
 8001718:	4013      	ands	r3, r2
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d1ee      	bne.n	80016fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d015      	beq.n	8001756 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
 8001732:	d006      	beq.n	8001742 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001734:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b5f      	ldr	r3, [pc, #380]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 800173a:	21e0      	movs	r1, #224	; 0xe0
 800173c:	01c9      	lsls	r1, r1, #7
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4a5d      	ldr	r2, [pc, #372]	; (80018bc <HAL_RCC_ClockConfig+0x1fc>)
 8001748:	4013      	ands	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001752:	430a      	orrs	r2, r1
 8001754:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2201      	movs	r2, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d057      	beq.n	8001810 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d107      	bne.n	8001778 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	029b      	lsls	r3, r3, #10
 8001770:	4013      	ands	r3, r2
 8001772:	d12b      	bne.n	80017cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e097      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d107      	bne.n	8001790 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001780:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	049b      	lsls	r3, r3, #18
 8001788:	4013      	ands	r3, r2
 800178a:	d11f      	bne.n	80017cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e08b      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001798:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4013      	ands	r3, r2
 80017a2:	d113      	bne.n	80017cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e07f      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d106      	bne.n	80017be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b0:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 80017b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d108      	bne.n	80017cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e074      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017be:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2202      	movs	r2, #2
 80017c4:	4013      	ands	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e06d      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017cc:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2207      	movs	r2, #7
 80017d2:	4393      	bics	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e0:	f7ff f95e 	bl	8000aa0 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e8:	e009      	b.n	80017fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ea:	f7ff f959 	bl	8000aa0 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a2f      	ldr	r2, [pc, #188]	; (80018b4 <HAL_RCC_ClockConfig+0x1f4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e054      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2238      	movs	r2, #56	; 0x38
 8001804:	401a      	ands	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ec      	bne.n	80017ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2207      	movs	r2, #7
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d21e      	bcs.n	800185c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2207      	movs	r2, #7
 8001824:	4393      	bics	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_ClockConfig+0x1f0>)
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001830:	f7ff f936 	bl	8000aa0 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001838:	e009      	b.n	800184e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183a:	f7ff f931 	bl	8000aa0 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <HAL_RCC_ClockConfig+0x1f4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e02c      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2207      	movs	r2, #7
 8001854:	4013      	ands	r3, r2
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2204      	movs	r2, #4
 8001862:	4013      	ands	r3, r2
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_RCC_ClockConfig+0x200>)
 800186c:	4013      	ands	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800187a:	f000 f829 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 800187e:	0001      	movs	r1, r0
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	220f      	movs	r2, #15
 8001888:	401a      	ands	r2, r3
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x204>)
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	58d3      	ldr	r3, [r2, r3]
 8001890:	221f      	movs	r2, #31
 8001892:	4013      	ands	r3, r2
 8001894:	000a      	movs	r2, r1
 8001896:	40da      	lsrs	r2, r3
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_ClockConfig+0x208>)
 800189a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x20c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff f8a1 	bl	80009e8 <HAL_InitTick>
 80018a6:	0003      	movs	r3, r0
}
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b004      	add	sp, #16
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40022000 	.word	0x40022000
 80018b4:	00001388 	.word	0x00001388
 80018b8:	40021000 	.word	0x40021000
 80018bc:	fffff0ff 	.word	0xfffff0ff
 80018c0:	ffff8fff 	.word	0xffff8fff
 80018c4:	08002c68 	.word	0x08002c68
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2238      	movs	r2, #56	; 0x38
 80018dc:	4013      	ands	r3, r2
 80018de:	d10f      	bne.n	8001900 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0adb      	lsrs	r3, r3, #11
 80018e6:	2207      	movs	r2, #7
 80018e8:	4013      	ands	r3, r2
 80018ea:	2201      	movs	r2, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	4835      	ldr	r0, [pc, #212]	; (80019cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80018f6:	f7fe fc05 	bl	8000104 <__udivsi3>
 80018fa:	0003      	movs	r3, r0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e05d      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2238      	movs	r2, #56	; 0x38
 8001906:	4013      	ands	r3, r2
 8001908:	2b08      	cmp	r3, #8
 800190a:	d102      	bne.n	8001912 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x100>)
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	e054      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2238      	movs	r2, #56	; 0x38
 8001918:	4013      	ands	r3, r2
 800191a:	2b10      	cmp	r3, #16
 800191c:	d138      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2203      	movs	r2, #3
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	2207      	movs	r2, #7
 8001930:	4013      	ands	r3, r2
 8001932:	3301      	adds	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d10d      	bne.n	8001958 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	4824      	ldr	r0, [pc, #144]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001940:	f7fe fbe0 	bl	8000104 <__udivsi3>
 8001944:	0003      	movs	r3, r0
 8001946:	0019      	movs	r1, r3
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	227f      	movs	r2, #127	; 0x7f
 8001950:	4013      	ands	r3, r2
 8001952:	434b      	muls	r3, r1
 8001954:	617b      	str	r3, [r7, #20]
        break;
 8001956:	e00d      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	481c      	ldr	r0, [pc, #112]	; (80019cc <HAL_RCC_GetSysClockFreq+0xfc>)
 800195c:	f7fe fbd2 	bl	8000104 <__udivsi3>
 8001960:	0003      	movs	r3, r0
 8001962:	0019      	movs	r1, r3
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	227f      	movs	r2, #127	; 0x7f
 800196c:	4013      	ands	r3, r2
 800196e:	434b      	muls	r3, r1
 8001970:	617b      	str	r3, [r7, #20]
        break;
 8001972:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0f5b      	lsrs	r3, r3, #29
 800197a:	2207      	movs	r2, #7
 800197c:	4013      	ands	r3, r2
 800197e:	3301      	adds	r3, #1
 8001980:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	6978      	ldr	r0, [r7, #20]
 8001986:	f7fe fbbd 	bl	8000104 <__udivsi3>
 800198a:	0003      	movs	r3, r0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	e015      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2238      	movs	r2, #56	; 0x38
 8001996:	4013      	ands	r3, r2
 8001998:	2b20      	cmp	r3, #32
 800199a:	d103      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2238      	movs	r2, #56	; 0x38
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b18      	cmp	r3, #24
 80019ae:	d103      	bne.n	80019b8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019b0:	23fa      	movs	r3, #250	; 0xfa
 80019b2:	01db      	lsls	r3, r3, #7
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	e001      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019bc:	693b      	ldr	r3, [r7, #16]
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b006      	add	sp, #24
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	40021000 	.word	0x40021000
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	007a1200 	.word	0x007a1200

080019d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	20000000 	.word	0x20000000

080019e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80019ec:	f7ff fff2 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f0:	0004      	movs	r4, r0
 80019f2:	f7ff faf3 	bl	8000fdc <LL_RCC_GetAPB1Prescaler>
 80019f6:	0003      	movs	r3, r0
 80019f8:	0b1a      	lsrs	r2, r3, #12
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	58d3      	ldr	r3, [r2, r3]
 8001a00:	221f      	movs	r2, #31
 8001a02:	4013      	ands	r3, r2
 8001a04:	40dc      	lsrs	r4, r3
 8001a06:	0023      	movs	r3, r4
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	08002ca8 	.word	0x08002ca8

08001a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a1c:	2313      	movs	r3, #19
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a24:	2312      	movs	r3, #18
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	029b      	lsls	r3, r3, #10
 8001a34:	4013      	ands	r3, r2
 8001a36:	d100      	bne.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a38:	e0ad      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2011      	movs	r0, #17
 8001a3c:	183b      	adds	r3, r7, r0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	055b      	lsls	r3, r3, #21
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d110      	bne.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0549      	lsls	r1, r1, #21
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	055b      	lsls	r3, r3, #21
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a70:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	0049      	lsls	r1, r1, #1
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a7e:	f7ff f80f 	bl	8000aa0 <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a88:	f7ff f80a 	bl	8000aa0 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d904      	bls.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a96:	2313      	movs	r3, #19
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	701a      	strb	r2, [r3, #0]
        break;
 8001a9e:	e005      	b.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d0ed      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001aac:	2313      	movs	r3, #19
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d15e      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aba:	23c0      	movs	r3, #192	; 0xc0
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d019      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d014      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad6:	4a24      	ldr	r2, [pc, #144]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0249      	lsls	r1, r1, #9
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001aec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001af0:	491e      	ldr	r1, [pc, #120]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001af2:	400a      	ands	r2, r1
 8001af4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	d016      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7fe ffcc 	bl	8000aa0 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0c:	e00c      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7fe ffc7 	bl	8000aa0 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d904      	bls.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b1e:	2313      	movs	r3, #19
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2203      	movs	r2, #3
 8001b24:	701a      	strb	r2, [r3, #0]
            break;
 8001b26:	e004      	b.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d0ed      	beq.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b32:	2313      	movs	r3, #19
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b50:	e016      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b52:	2312      	movs	r3, #18
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2213      	movs	r2, #19
 8001b58:	18ba      	adds	r2, r7, r2
 8001b5a:	7812      	ldrb	r2, [r2, #0]
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e00f      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40007000 	.word	0x40007000
 8001b68:	fffffcff 	.word	0xfffffcff
 8001b6c:	fffeffff 	.word	0xfffeffff
 8001b70:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b74:	2312      	movs	r3, #18
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2213      	movs	r2, #19
 8001b7a:	18ba      	adds	r2, r7, r2
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b80:	2311      	movs	r3, #17
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d105      	bne.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8a:	4bb6      	ldr	r3, [pc, #728]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b8e:	4bb5      	ldr	r3, [pc, #724]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b90:	49b5      	ldr	r1, [pc, #724]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba0:	4bb0      	ldr	r3, [pc, #704]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4bad      	ldr	r3, [pc, #692]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bbe:	4ba9      	ldr	r3, [pc, #676]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4ba5      	ldr	r3, [pc, #660]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bdc:	4ba1      	ldr	r3, [pc, #644]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	2230      	movs	r2, #48	; 0x30
 8001be2:	4393      	bics	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4b9e      	ldr	r3, [pc, #632]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001bfa:	4b9a      	ldr	r3, [pc, #616]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	4a9b      	ldr	r2, [pc, #620]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	4b96      	ldr	r3, [pc, #600]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	4013      	ands	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001c1a:	4b92      	ldr	r3, [pc, #584]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	4a94      	ldr	r2, [pc, #592]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	4b8e      	ldr	r3, [pc, #568]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d009      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c3a:	4b8a      	ldr	r3, [pc, #552]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	4a8d      	ldr	r2, [pc, #564]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c48:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4013      	ands	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c5a:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	4a86      	ldr	r2, [pc, #536]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c68:	4b7e      	ldr	r3, [pc, #504]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2220      	movs	r2, #32
 8001c74:	4013      	ands	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c78:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	4b77      	ldr	r3, [pc, #476]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	4013      	ands	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c96:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	4a79      	ldr	r2, [pc, #484]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	01db      	lsls	r3, r3, #7
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d015      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	0899      	lsrs	r1, r3, #2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc2:	4b68      	ldr	r3, [pc, #416]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	05db      	lsls	r3, r3, #23
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	0249      	lsls	r1, r1, #9
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	031b      	lsls	r3, r3, #12
 8001cea:	4013      	ands	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cee:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	039b      	lsls	r3, r3, #14
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d016      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d0e:	4b55      	ldr	r3, [pc, #340]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1c:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	03db      	lsls	r3, r3, #15
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d106      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0449      	lsls	r1, r1, #17
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	03db      	lsls	r3, r3, #15
 8001d44:	4013      	ands	r3, r2
 8001d46:	d016      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	045b      	lsls	r3, r3, #17
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	0449      	lsls	r1, r1, #17
 8001d72:	430a      	orrs	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d014      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	2203      	movs	r2, #3
 8001d88:	4393      	bics	r3, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d106      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0249      	lsls	r1, r1, #9
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	019b      	lsls	r3, r3, #6
 8001db4:	4013      	ands	r3, r2
 8001db6:	d014      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	220c      	movs	r2, #12
 8001dbe:	4393      	bics	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0249      	lsls	r1, r1, #9
 8001dde:	430a      	orrs	r2, r1
 8001de0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	045b      	lsls	r3, r3, #17
 8001dea:	4013      	ands	r3, r2
 8001dec:	d016      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0449      	lsls	r1, r1, #17
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	049b      	lsls	r3, r3, #18
 8001e24:	4013      	ands	r3, r2
 8001e26:	d016      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	0449      	lsls	r1, r1, #17
 8001e52:	430a      	orrs	r2, r1
 8001e54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e56:	2312      	movs	r3, #18
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b006      	add	sp, #24
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	efffffff 	.word	0xefffffff
 8001e6c:	fffff3ff 	.word	0xfffff3ff
 8001e70:	fffffcff 	.word	0xfffffcff
 8001e74:	fff3ffff 	.word	0xfff3ffff
 8001e78:	ffcfffff 	.word	0xffcfffff
 8001e7c:	ffffcfff 	.word	0xffffcfff
 8001e80:	ffff3fff 	.word	0xffff3fff
 8001e84:	ffbfffff 	.word	0xffbfffff
 8001e88:	feffffff 	.word	0xfeffffff

08001e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e046      	b.n	8001f2c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2284      	movs	r2, #132	; 0x84
 8001ea2:	589b      	ldr	r3, [r3, r2]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7fe fce8 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2284      	movs	r2, #132	; 0x84
 8001ebc:	2124      	movs	r1, #36	; 0x24
 8001ebe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	438a      	bics	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f830 	bl	8001f38 <UART_SetConfig>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e024      	b.n	8001f2c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 fba3 	bl	8002638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	490d      	ldr	r1, [pc, #52]	; (8001f34 <HAL_UART_Init+0xa8>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	212a      	movs	r1, #42	; 0x2a
 8001f0e:	438a      	bics	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 fc3b 	bl	80027a0 <UART_CheckIdleState>
 8001f2a:	0003      	movs	r3, r0
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b002      	add	sp, #8
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	ffffb7ff 	.word	0xffffb7ff

08001f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b090      	sub	sp, #64	; 0x40
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f40:	231a      	movs	r3, #26
 8001f42:	2220      	movs	r2, #32
 8001f44:	4694      	mov	ip, r2
 8001f46:	44bc      	add	ip, r7
 8001f48:	4463      	add	r3, ip
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4ac1      	ldr	r2, [pc, #772]	; (8002274 <UART_SetConfig+0x33c>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4abd      	ldr	r2, [pc, #756]	; (8002278 <UART_SetConfig+0x340>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	0018      	movs	r0, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	68d9      	ldr	r1, [r3, #12]
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	0003      	movs	r3, r0
 8001f92:	430b      	orrs	r3, r1
 8001f94:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4ab6      	ldr	r2, [pc, #728]	; (800227c <UART_SetConfig+0x344>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d009      	beq.n	8001fba <UART_SetConfig+0x82>
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4ab5      	ldr	r2, [pc, #724]	; (8002280 <UART_SetConfig+0x348>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d004      	beq.n	8001fba <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4ab0      	ldr	r2, [pc, #704]	; (8002284 <UART_SetConfig+0x34c>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0018      	movs	r0, r3
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4aa6      	ldr	r2, [pc, #664]	; (8002288 <UART_SetConfig+0x350>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d136      	bne.n	8002062 <UART_SetConfig+0x12a>
 8001ff4:	4ba5      	ldr	r3, [pc, #660]	; (800228c <UART_SetConfig+0x354>)
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d020      	beq.n	8002042 <UART_SetConfig+0x10a>
 8002000:	d827      	bhi.n	8002052 <UART_SetConfig+0x11a>
 8002002:	2b02      	cmp	r3, #2
 8002004:	d00d      	beq.n	8002022 <UART_SetConfig+0xea>
 8002006:	d824      	bhi.n	8002052 <UART_SetConfig+0x11a>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <UART_SetConfig+0xda>
 800200c:	2b01      	cmp	r3, #1
 800200e:	d010      	beq.n	8002032 <UART_SetConfig+0xfa>
 8002010:	e01f      	b.n	8002052 <UART_SetConfig+0x11a>
 8002012:	231b      	movs	r3, #27
 8002014:	2220      	movs	r2, #32
 8002016:	4694      	mov	ip, r2
 8002018:	44bc      	add	ip, r7
 800201a:	4463      	add	r3, ip
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e16f      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002022:	231b      	movs	r3, #27
 8002024:	2220      	movs	r2, #32
 8002026:	4694      	mov	ip, r2
 8002028:	44bc      	add	ip, r7
 800202a:	4463      	add	r3, ip
 800202c:	2202      	movs	r2, #2
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e167      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002032:	231b      	movs	r3, #27
 8002034:	2220      	movs	r2, #32
 8002036:	4694      	mov	ip, r2
 8002038:	44bc      	add	ip, r7
 800203a:	4463      	add	r3, ip
 800203c:	2204      	movs	r2, #4
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e15f      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002042:	231b      	movs	r3, #27
 8002044:	2220      	movs	r2, #32
 8002046:	4694      	mov	ip, r2
 8002048:	44bc      	add	ip, r7
 800204a:	4463      	add	r3, ip
 800204c:	2208      	movs	r2, #8
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e157      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002052:	231b      	movs	r3, #27
 8002054:	2220      	movs	r2, #32
 8002056:	4694      	mov	ip, r2
 8002058:	44bc      	add	ip, r7
 800205a:	4463      	add	r3, ip
 800205c:	2210      	movs	r2, #16
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e14f      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a8a      	ldr	r2, [pc, #552]	; (8002290 <UART_SetConfig+0x358>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d136      	bne.n	80020da <UART_SetConfig+0x1a2>
 800206c:	4b87      	ldr	r3, [pc, #540]	; (800228c <UART_SetConfig+0x354>)
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	220c      	movs	r2, #12
 8002072:	4013      	ands	r3, r2
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d020      	beq.n	80020ba <UART_SetConfig+0x182>
 8002078:	d827      	bhi.n	80020ca <UART_SetConfig+0x192>
 800207a:	2b08      	cmp	r3, #8
 800207c:	d00d      	beq.n	800209a <UART_SetConfig+0x162>
 800207e:	d824      	bhi.n	80020ca <UART_SetConfig+0x192>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <UART_SetConfig+0x152>
 8002084:	2b04      	cmp	r3, #4
 8002086:	d010      	beq.n	80020aa <UART_SetConfig+0x172>
 8002088:	e01f      	b.n	80020ca <UART_SetConfig+0x192>
 800208a:	231b      	movs	r3, #27
 800208c:	2220      	movs	r2, #32
 800208e:	4694      	mov	ip, r2
 8002090:	44bc      	add	ip, r7
 8002092:	4463      	add	r3, ip
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e133      	b.n	8002302 <UART_SetConfig+0x3ca>
 800209a:	231b      	movs	r3, #27
 800209c:	2220      	movs	r2, #32
 800209e:	4694      	mov	ip, r2
 80020a0:	44bc      	add	ip, r7
 80020a2:	4463      	add	r3, ip
 80020a4:	2202      	movs	r2, #2
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e12b      	b.n	8002302 <UART_SetConfig+0x3ca>
 80020aa:	231b      	movs	r3, #27
 80020ac:	2220      	movs	r2, #32
 80020ae:	4694      	mov	ip, r2
 80020b0:	44bc      	add	ip, r7
 80020b2:	4463      	add	r3, ip
 80020b4:	2204      	movs	r2, #4
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e123      	b.n	8002302 <UART_SetConfig+0x3ca>
 80020ba:	231b      	movs	r3, #27
 80020bc:	2220      	movs	r2, #32
 80020be:	4694      	mov	ip, r2
 80020c0:	44bc      	add	ip, r7
 80020c2:	4463      	add	r3, ip
 80020c4:	2208      	movs	r2, #8
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e11b      	b.n	8002302 <UART_SetConfig+0x3ca>
 80020ca:	231b      	movs	r3, #27
 80020cc:	2220      	movs	r2, #32
 80020ce:	4694      	mov	ip, r2
 80020d0:	44bc      	add	ip, r7
 80020d2:	4463      	add	r3, ip
 80020d4:	2210      	movs	r2, #16
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e113      	b.n	8002302 <UART_SetConfig+0x3ca>
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6d      	ldr	r2, [pc, #436]	; (8002294 <UART_SetConfig+0x35c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d136      	bne.n	8002152 <UART_SetConfig+0x21a>
 80020e4:	4b69      	ldr	r3, [pc, #420]	; (800228c <UART_SetConfig+0x354>)
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	2230      	movs	r2, #48	; 0x30
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b30      	cmp	r3, #48	; 0x30
 80020ee:	d020      	beq.n	8002132 <UART_SetConfig+0x1fa>
 80020f0:	d827      	bhi.n	8002142 <UART_SetConfig+0x20a>
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d00d      	beq.n	8002112 <UART_SetConfig+0x1da>
 80020f6:	d824      	bhi.n	8002142 <UART_SetConfig+0x20a>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <UART_SetConfig+0x1ca>
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d010      	beq.n	8002122 <UART_SetConfig+0x1ea>
 8002100:	e01f      	b.n	8002142 <UART_SetConfig+0x20a>
 8002102:	231b      	movs	r3, #27
 8002104:	2220      	movs	r2, #32
 8002106:	4694      	mov	ip, r2
 8002108:	44bc      	add	ip, r7
 800210a:	4463      	add	r3, ip
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e0f7      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002112:	231b      	movs	r3, #27
 8002114:	2220      	movs	r2, #32
 8002116:	4694      	mov	ip, r2
 8002118:	44bc      	add	ip, r7
 800211a:	4463      	add	r3, ip
 800211c:	2202      	movs	r2, #2
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e0ef      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002122:	231b      	movs	r3, #27
 8002124:	2220      	movs	r2, #32
 8002126:	4694      	mov	ip, r2
 8002128:	44bc      	add	ip, r7
 800212a:	4463      	add	r3, ip
 800212c:	2204      	movs	r2, #4
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e0e7      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002132:	231b      	movs	r3, #27
 8002134:	2220      	movs	r2, #32
 8002136:	4694      	mov	ip, r2
 8002138:	44bc      	add	ip, r7
 800213a:	4463      	add	r3, ip
 800213c:	2208      	movs	r2, #8
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e0df      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002142:	231b      	movs	r3, #27
 8002144:	2220      	movs	r2, #32
 8002146:	4694      	mov	ip, r2
 8002148:	44bc      	add	ip, r7
 800214a:	4463      	add	r3, ip
 800214c:	2210      	movs	r2, #16
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e0d7      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a50      	ldr	r2, [pc, #320]	; (8002298 <UART_SetConfig+0x360>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d107      	bne.n	800216c <UART_SetConfig+0x234>
 800215c:	231b      	movs	r3, #27
 800215e:	2220      	movs	r2, #32
 8002160:	4694      	mov	ip, r2
 8002162:	44bc      	add	ip, r7
 8002164:	4463      	add	r3, ip
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	e0ca      	b.n	8002302 <UART_SetConfig+0x3ca>
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a4a      	ldr	r2, [pc, #296]	; (800229c <UART_SetConfig+0x364>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d107      	bne.n	8002186 <UART_SetConfig+0x24e>
 8002176:	231b      	movs	r3, #27
 8002178:	2220      	movs	r2, #32
 800217a:	4694      	mov	ip, r2
 800217c:	44bc      	add	ip, r7
 800217e:	4463      	add	r3, ip
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e0bd      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a45      	ldr	r2, [pc, #276]	; (80022a0 <UART_SetConfig+0x368>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d107      	bne.n	80021a0 <UART_SetConfig+0x268>
 8002190:	231b      	movs	r3, #27
 8002192:	2220      	movs	r2, #32
 8002194:	4694      	mov	ip, r2
 8002196:	44bc      	add	ip, r7
 8002198:	4463      	add	r3, ip
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e0b0      	b.n	8002302 <UART_SetConfig+0x3ca>
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a35      	ldr	r2, [pc, #212]	; (800227c <UART_SetConfig+0x344>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d143      	bne.n	8002232 <UART_SetConfig+0x2fa>
 80021aa:	4b38      	ldr	r3, [pc, #224]	; (800228c <UART_SetConfig+0x354>)
 80021ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4013      	ands	r3, r2
 80021b4:	22c0      	movs	r2, #192	; 0xc0
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d02a      	beq.n	8002212 <UART_SetConfig+0x2da>
 80021bc:	22c0      	movs	r2, #192	; 0xc0
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d82e      	bhi.n	8002222 <UART_SetConfig+0x2ea>
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d012      	beq.n	80021f2 <UART_SetConfig+0x2ba>
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d826      	bhi.n	8002222 <UART_SetConfig+0x2ea>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <UART_SetConfig+0x2aa>
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	00d2      	lsls	r2, r2, #3
 80021dc:	4293      	cmp	r3, r2
 80021de:	d010      	beq.n	8002202 <UART_SetConfig+0x2ca>
 80021e0:	e01f      	b.n	8002222 <UART_SetConfig+0x2ea>
 80021e2:	231b      	movs	r3, #27
 80021e4:	2220      	movs	r2, #32
 80021e6:	4694      	mov	ip, r2
 80021e8:	44bc      	add	ip, r7
 80021ea:	4463      	add	r3, ip
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e087      	b.n	8002302 <UART_SetConfig+0x3ca>
 80021f2:	231b      	movs	r3, #27
 80021f4:	2220      	movs	r2, #32
 80021f6:	4694      	mov	ip, r2
 80021f8:	44bc      	add	ip, r7
 80021fa:	4463      	add	r3, ip
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e07f      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002202:	231b      	movs	r3, #27
 8002204:	2220      	movs	r2, #32
 8002206:	4694      	mov	ip, r2
 8002208:	44bc      	add	ip, r7
 800220a:	4463      	add	r3, ip
 800220c:	2204      	movs	r2, #4
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e077      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002212:	231b      	movs	r3, #27
 8002214:	2220      	movs	r2, #32
 8002216:	4694      	mov	ip, r2
 8002218:	44bc      	add	ip, r7
 800221a:	4463      	add	r3, ip
 800221c:	2208      	movs	r2, #8
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e06f      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002222:	231b      	movs	r3, #27
 8002224:	2220      	movs	r2, #32
 8002226:	4694      	mov	ip, r2
 8002228:	44bc      	add	ip, r7
 800222a:	4463      	add	r3, ip
 800222c:	2210      	movs	r2, #16
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e067      	b.n	8002302 <UART_SetConfig+0x3ca>
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <UART_SetConfig+0x348>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d15b      	bne.n	80022f4 <UART_SetConfig+0x3bc>
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <UART_SetConfig+0x354>)
 800223e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002240:	23c0      	movs	r3, #192	; 0xc0
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4013      	ands	r3, r2
 8002246:	22c0      	movs	r2, #192	; 0xc0
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4293      	cmp	r3, r2
 800224c:	d042      	beq.n	80022d4 <UART_SetConfig+0x39c>
 800224e:	22c0      	movs	r2, #192	; 0xc0
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4293      	cmp	r3, r2
 8002254:	d846      	bhi.n	80022e4 <UART_SetConfig+0x3ac>
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	0092      	lsls	r2, r2, #2
 800225a:	4293      	cmp	r3, r2
 800225c:	d02a      	beq.n	80022b4 <UART_SetConfig+0x37c>
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4293      	cmp	r3, r2
 8002264:	d83e      	bhi.n	80022e4 <UART_SetConfig+0x3ac>
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01c      	beq.n	80022a4 <UART_SetConfig+0x36c>
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	0052      	lsls	r2, r2, #1
 800226e:	4293      	cmp	r3, r2
 8002270:	d028      	beq.n	80022c4 <UART_SetConfig+0x38c>
 8002272:	e037      	b.n	80022e4 <UART_SetConfig+0x3ac>
 8002274:	cfff69f3 	.word	0xcfff69f3
 8002278:	ffffcfff 	.word	0xffffcfff
 800227c:	40008000 	.word	0x40008000
 8002280:	40008400 	.word	0x40008400
 8002284:	11fff4ff 	.word	0x11fff4ff
 8002288:	40013800 	.word	0x40013800
 800228c:	40021000 	.word	0x40021000
 8002290:	40004400 	.word	0x40004400
 8002294:	40004800 	.word	0x40004800
 8002298:	40004c00 	.word	0x40004c00
 800229c:	40005000 	.word	0x40005000
 80022a0:	40013c00 	.word	0x40013c00
 80022a4:	231b      	movs	r3, #27
 80022a6:	2220      	movs	r2, #32
 80022a8:	4694      	mov	ip, r2
 80022aa:	44bc      	add	ip, r7
 80022ac:	4463      	add	r3, ip
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e026      	b.n	8002302 <UART_SetConfig+0x3ca>
 80022b4:	231b      	movs	r3, #27
 80022b6:	2220      	movs	r2, #32
 80022b8:	4694      	mov	ip, r2
 80022ba:	44bc      	add	ip, r7
 80022bc:	4463      	add	r3, ip
 80022be:	2202      	movs	r2, #2
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e01e      	b.n	8002302 <UART_SetConfig+0x3ca>
 80022c4:	231b      	movs	r3, #27
 80022c6:	2220      	movs	r2, #32
 80022c8:	4694      	mov	ip, r2
 80022ca:	44bc      	add	ip, r7
 80022cc:	4463      	add	r3, ip
 80022ce:	2204      	movs	r2, #4
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e016      	b.n	8002302 <UART_SetConfig+0x3ca>
 80022d4:	231b      	movs	r3, #27
 80022d6:	2220      	movs	r2, #32
 80022d8:	4694      	mov	ip, r2
 80022da:	44bc      	add	ip, r7
 80022dc:	4463      	add	r3, ip
 80022de:	2208      	movs	r2, #8
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e00e      	b.n	8002302 <UART_SetConfig+0x3ca>
 80022e4:	231b      	movs	r3, #27
 80022e6:	2220      	movs	r2, #32
 80022e8:	4694      	mov	ip, r2
 80022ea:	44bc      	add	ip, r7
 80022ec:	4463      	add	r3, ip
 80022ee:	2210      	movs	r2, #16
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e006      	b.n	8002302 <UART_SetConfig+0x3ca>
 80022f4:	231b      	movs	r3, #27
 80022f6:	2220      	movs	r2, #32
 80022f8:	4694      	mov	ip, r2
 80022fa:	44bc      	add	ip, r7
 80022fc:	4463      	add	r3, ip
 80022fe:	2210      	movs	r2, #16
 8002300:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4ab8      	ldr	r2, [pc, #736]	; (80025e8 <UART_SetConfig+0x6b0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d005      	beq.n	8002318 <UART_SetConfig+0x3e0>
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4ab6      	ldr	r2, [pc, #728]	; (80025ec <UART_SetConfig+0x6b4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d000      	beq.n	8002318 <UART_SetConfig+0x3e0>
 8002316:	e097      	b.n	8002448 <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002318:	231b      	movs	r3, #27
 800231a:	2220      	movs	r2, #32
 800231c:	4694      	mov	ip, r2
 800231e:	44bc      	add	ip, r7
 8002320:	4463      	add	r3, ip
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d015      	beq.n	8002354 <UART_SetConfig+0x41c>
 8002328:	dc18      	bgt.n	800235c <UART_SetConfig+0x424>
 800232a:	2b04      	cmp	r3, #4
 800232c:	d00d      	beq.n	800234a <UART_SetConfig+0x412>
 800232e:	dc15      	bgt.n	800235c <UART_SetConfig+0x424>
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <UART_SetConfig+0x402>
 8002334:	2b02      	cmp	r3, #2
 8002336:	d005      	beq.n	8002344 <UART_SetConfig+0x40c>
 8002338:	e010      	b.n	800235c <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800233a:	f7ff fb55 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 800233e:	0003      	movs	r3, r0
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002342:	e015      	b.n	8002370 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002344:	4baa      	ldr	r3, [pc, #680]	; (80025f0 <UART_SetConfig+0x6b8>)
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002348:	e012      	b.n	8002370 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800234a:	f7ff fac1 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 800234e:	0003      	movs	r3, r0
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002352:	e00d      	b.n	8002370 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800235a:	e009      	b.n	8002370 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002360:	231a      	movs	r3, #26
 8002362:	2220      	movs	r2, #32
 8002364:	4694      	mov	ip, r2
 8002366:	44bc      	add	ip, r7
 8002368:	4463      	add	r3, ip
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
        break;
 800236e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	2b00      	cmp	r3, #0
 8002374:	d100      	bne.n	8002378 <UART_SetConfig+0x440>
 8002376:	e146      	b.n	8002606 <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237c:	4b9d      	ldr	r3, [pc, #628]	; (80025f4 <UART_SetConfig+0x6bc>)
 800237e:	0052      	lsls	r2, r2, #1
 8002380:	5ad3      	ldrh	r3, [r2, r3]
 8002382:	0019      	movs	r1, r3
 8002384:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002386:	f7fd febd 	bl	8000104 <__udivsi3>
 800238a:	0003      	movs	r3, r0
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	0013      	movs	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	189b      	adds	r3, r3, r2
 8002398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800239a:	429a      	cmp	r2, r3
 800239c:	d305      	bcc.n	80023aa <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d907      	bls.n	80023ba <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 80023aa:	231a      	movs	r3, #26
 80023ac:	2220      	movs	r2, #32
 80023ae:	4694      	mov	ip, r2
 80023b0:	44bc      	add	ip, r7
 80023b2:	4463      	add	r3, ip
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	e045      	b.n	8002446 <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c6:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <UART_SetConfig+0x6bc>)
 80023c8:	0052      	lsls	r2, r2, #1
 80023ca:	5ad3      	ldrh	r3, [r2, r3]
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	69b8      	ldr	r0, [r7, #24]
 80023d8:	69f9      	ldr	r1, [r7, #28]
 80023da:	f7fe f809 	bl	80003f0 <__aeabi_uldivmod>
 80023de:	0002      	movs	r2, r0
 80023e0:	000b      	movs	r3, r1
 80023e2:	0e11      	lsrs	r1, r2, #24
 80023e4:	021d      	lsls	r5, r3, #8
 80023e6:	430d      	orrs	r5, r1
 80023e8:	0214      	lsls	r4, r2, #8
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68b8      	ldr	r0, [r7, #8]
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	1900      	adds	r0, r0, r4
 80023fc:	4169      	adcs	r1, r5
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f7fd fff0 	bl	80003f0 <__aeabi_uldivmod>
 8002410:	0002      	movs	r2, r0
 8002412:	000b      	movs	r3, r1
 8002414:	0013      	movs	r3, r2
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241a:	23c0      	movs	r3, #192	; 0xc0
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	429a      	cmp	r2, r3
 8002420:	d309      	bcc.n	8002436 <UART_SetConfig+0x4fe>
 8002422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	035b      	lsls	r3, r3, #13
 8002428:	429a      	cmp	r2, r3
 800242a:	d204      	bcs.n	8002436 <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	e007      	b.n	8002446 <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8002436:	231a      	movs	r3, #26
 8002438:	2220      	movs	r2, #32
 800243a:	4694      	mov	ip, r2
 800243c:	44bc      	add	ip, r7
 800243e:	4463      	add	r3, ip
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002444:	e0df      	b.n	8002606 <UART_SetConfig+0x6ce>
 8002446:	e0de      	b.n	8002606 <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	429a      	cmp	r2, r3
 8002452:	d000      	beq.n	8002456 <UART_SetConfig+0x51e>
 8002454:	e074      	b.n	8002540 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8002456:	231b      	movs	r3, #27
 8002458:	2220      	movs	r2, #32
 800245a:	4694      	mov	ip, r2
 800245c:	44bc      	add	ip, r7
 800245e:	4463      	add	r3, ip
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b08      	cmp	r3, #8
 8002464:	d015      	beq.n	8002492 <UART_SetConfig+0x55a>
 8002466:	dc18      	bgt.n	800249a <UART_SetConfig+0x562>
 8002468:	2b04      	cmp	r3, #4
 800246a:	d00d      	beq.n	8002488 <UART_SetConfig+0x550>
 800246c:	dc15      	bgt.n	800249a <UART_SetConfig+0x562>
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <UART_SetConfig+0x540>
 8002472:	2b02      	cmp	r3, #2
 8002474:	d005      	beq.n	8002482 <UART_SetConfig+0x54a>
 8002476:	e010      	b.n	800249a <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002478:	f7ff fab6 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 800247c:	0003      	movs	r3, r0
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002480:	e015      	b.n	80024ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002482:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <UART_SetConfig+0x6b8>)
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002486:	e012      	b.n	80024ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002488:	f7ff fa22 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 800248c:	0003      	movs	r3, r0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002490:	e00d      	b.n	80024ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002498:	e009      	b.n	80024ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800249e:	231a      	movs	r3, #26
 80024a0:	2220      	movs	r2, #32
 80024a2:	4694      	mov	ip, r2
 80024a4:	44bc      	add	ip, r7
 80024a6:	4463      	add	r3, ip
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
        break;
 80024ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d100      	bne.n	80024b6 <UART_SetConfig+0x57e>
 80024b4:	e0a7      	b.n	8002606 <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <UART_SetConfig+0x6bc>)
 80024bc:	0052      	lsls	r2, r2, #1
 80024be:	5ad3      	ldrh	r3, [r2, r3]
 80024c0:	0019      	movs	r1, r3
 80024c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024c4:	f7fd fe1e 	bl	8000104 <__udivsi3>
 80024c8:	0003      	movs	r3, r0
 80024ca:	005a      	lsls	r2, r3, #1
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	18d2      	adds	r2, r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0019      	movs	r1, r3
 80024da:	0010      	movs	r0, r2
 80024dc:	f7fd fe12 	bl	8000104 <__udivsi3>
 80024e0:	0003      	movs	r3, r0
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d921      	bls.n	8002530 <UART_SetConfig+0x5f8>
 80024ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	025b      	lsls	r3, r3, #9
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d21c      	bcs.n	8002530 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	200e      	movs	r0, #14
 80024fc:	2420      	movs	r4, #32
 80024fe:	193b      	adds	r3, r7, r4
 8002500:	181b      	adds	r3, r3, r0
 8002502:	210f      	movs	r1, #15
 8002504:	438a      	bics	r2, r1
 8002506:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	b29b      	uxth	r3, r3
 800250e:	2207      	movs	r2, #7
 8002510:	4013      	ands	r3, r2
 8002512:	b299      	uxth	r1, r3
 8002514:	193b      	adds	r3, r7, r4
 8002516:	181b      	adds	r3, r3, r0
 8002518:	193a      	adds	r2, r7, r4
 800251a:	1812      	adds	r2, r2, r0
 800251c:	8812      	ldrh	r2, [r2, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	193a      	adds	r2, r7, r4
 8002528:	1812      	adds	r2, r2, r0
 800252a:	8812      	ldrh	r2, [r2, #0]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	e06a      	b.n	8002606 <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002530:	231a      	movs	r3, #26
 8002532:	2220      	movs	r2, #32
 8002534:	4694      	mov	ip, r2
 8002536:	44bc      	add	ip, r7
 8002538:	4463      	add	r3, ip
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e062      	b.n	8002606 <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002540:	231b      	movs	r3, #27
 8002542:	2220      	movs	r2, #32
 8002544:	4694      	mov	ip, r2
 8002546:	44bc      	add	ip, r7
 8002548:	4463      	add	r3, ip
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d015      	beq.n	800257c <UART_SetConfig+0x644>
 8002550:	dc18      	bgt.n	8002584 <UART_SetConfig+0x64c>
 8002552:	2b04      	cmp	r3, #4
 8002554:	d00d      	beq.n	8002572 <UART_SetConfig+0x63a>
 8002556:	dc15      	bgt.n	8002584 <UART_SetConfig+0x64c>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <UART_SetConfig+0x62a>
 800255c:	2b02      	cmp	r3, #2
 800255e:	d005      	beq.n	800256c <UART_SetConfig+0x634>
 8002560:	e010      	b.n	8002584 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002562:	f7ff fa41 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002566:	0003      	movs	r3, r0
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800256a:	e015      	b.n	8002598 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <UART_SetConfig+0x6b8>)
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002570:	e012      	b.n	8002598 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002572:	f7ff f9ad 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 8002576:	0003      	movs	r3, r0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800257a:	e00d      	b.n	8002598 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002582:	e009      	b.n	8002598 <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002588:	231a      	movs	r3, #26
 800258a:	2220      	movs	r2, #32
 800258c:	4694      	mov	ip, r2
 800258e:	44bc      	add	ip, r7
 8002590:	4463      	add	r3, ip
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
        break;
 8002596:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	2b00      	cmp	r3, #0
 800259c:	d033      	beq.n	8002606 <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <UART_SetConfig+0x6bc>)
 80025a4:	0052      	lsls	r2, r2, #1
 80025a6:	5ad3      	ldrh	r3, [r2, r3]
 80025a8:	0019      	movs	r1, r3
 80025aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025ac:	f7fd fdaa 	bl	8000104 <__udivsi3>
 80025b0:	0003      	movs	r3, r0
 80025b2:	001a      	movs	r2, r3
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	18d2      	adds	r2, r2, r3
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	0019      	movs	r1, r3
 80025c2:	0010      	movs	r0, r2
 80025c4:	f7fd fd9e 	bl	8000104 <__udivsi3>
 80025c8:	0003      	movs	r3, r0
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d911      	bls.n	80025f8 <UART_SetConfig+0x6c0>
 80025d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	025b      	lsls	r3, r3, #9
 80025da:	429a      	cmp	r2, r3
 80025dc:	d20c      	bcs.n	80025f8 <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	e00e      	b.n	8002606 <UART_SetConfig+0x6ce>
 80025e8:	40008000 	.word	0x40008000
 80025ec:	40008400 	.word	0x40008400
 80025f0:	00f42400 	.word	0x00f42400
 80025f4:	08002cc8 	.word	0x08002cc8
      }
      else
      {
        ret = HAL_ERROR;
 80025f8:	231a      	movs	r3, #26
 80025fa:	2220      	movs	r2, #32
 80025fc:	4694      	mov	ip, r2
 80025fe:	44bc      	add	ip, r7
 8002600:	4463      	add	r3, ip
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	226a      	movs	r2, #106	; 0x6a
 800260a:	2101      	movs	r1, #1
 800260c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	2268      	movs	r2, #104	; 0x68
 8002612:	2101      	movs	r1, #1
 8002614:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	2200      	movs	r2, #0
 800261a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	2200      	movs	r2, #0
 8002620:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002622:	231a      	movs	r3, #26
 8002624:	2220      	movs	r2, #32
 8002626:	4694      	mov	ip, r2
 8002628:	44bc      	add	ip, r7
 800262a:	4463      	add	r3, ip
 800262c:	781b      	ldrb	r3, [r3, #0]
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b010      	add	sp, #64	; 0x40
 8002634:	bdb0      	pop	{r4, r5, r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)

08002638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	d00b      	beq.n	8002662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a4a      	ldr	r2, [pc, #296]	; (800277c <UART_AdvFeatureConfig+0x144>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	d00b      	beq.n	8002684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4a43      	ldr	r2, [pc, #268]	; (8002780 <UART_AdvFeatureConfig+0x148>)
 8002674:	4013      	ands	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	2204      	movs	r2, #4
 800268a:	4013      	ands	r3, r2
 800268c:	d00b      	beq.n	80026a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <UART_AdvFeatureConfig+0x14c>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2208      	movs	r2, #8
 80026ac:	4013      	ands	r3, r2
 80026ae:	d00b      	beq.n	80026c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a34      	ldr	r2, [pc, #208]	; (8002788 <UART_AdvFeatureConfig+0x150>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	2210      	movs	r2, #16
 80026ce:	4013      	ands	r3, r2
 80026d0:	d00b      	beq.n	80026ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a2c      	ldr	r2, [pc, #176]	; (800278c <UART_AdvFeatureConfig+0x154>)
 80026da:	4013      	ands	r3, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	2220      	movs	r2, #32
 80026f0:	4013      	ands	r3, r2
 80026f2:	d00b      	beq.n	800270c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4a25      	ldr	r2, [pc, #148]	; (8002790 <UART_AdvFeatureConfig+0x158>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	4013      	ands	r3, r2
 8002714:	d01d      	beq.n	8002752 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <UART_AdvFeatureConfig+0x15c>)
 800271e:	4013      	ands	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	035b      	lsls	r3, r3, #13
 8002736:	429a      	cmp	r2, r3
 8002738:	d10b      	bne.n	8002752 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a15      	ldr	r2, [pc, #84]	; (8002798 <UART_AdvFeatureConfig+0x160>)
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	4013      	ands	r3, r2
 800275a:	d00b      	beq.n	8002774 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <UART_AdvFeatureConfig+0x164>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	605a      	str	r2, [r3, #4]
  }
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}
 800277c:	fffdffff 	.word	0xfffdffff
 8002780:	fffeffff 	.word	0xfffeffff
 8002784:	fffbffff 	.word	0xfffbffff
 8002788:	ffff7fff 	.word	0xffff7fff
 800278c:	ffffefff 	.word	0xffffefff
 8002790:	ffffdfff 	.word	0xffffdfff
 8002794:	ffefffff 	.word	0xffefffff
 8002798:	ff9fffff 	.word	0xff9fffff
 800279c:	fff7ffff 	.word	0xfff7ffff

080027a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	228c      	movs	r2, #140	; 0x8c
 80027ac:	2100      	movs	r1, #0
 80027ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027b0:	f7fe f976 	bl	8000aa0 <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2208      	movs	r2, #8
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d10c      	bne.n	80027e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2280      	movs	r2, #128	; 0x80
 80027ca:	0391      	lsls	r1, r2, #14
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <UART_CheckIdleState+0x90>)
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f000 f82e 	bl	8002834 <UART_WaitOnFlagUntilTimeout>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e023      	b.n	8002828 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d10c      	bne.n	8002808 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	03d1      	lsls	r1, r2, #15
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <UART_CheckIdleState+0x90>)
 80027f8:	9200      	str	r2, [sp, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f000 f81a 	bl	8002834 <UART_WaitOnFlagUntilTimeout>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e00f      	b.n	8002828 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2284      	movs	r2, #132	; 0x84
 800280c:	2120      	movs	r1, #32
 800280e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2288      	movs	r2, #136	; 0x88
 8002814:	2120      	movs	r1, #32
 8002816:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	2100      	movs	r1, #0
 8002824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b004      	add	sp, #16
 800282e:	bd80      	pop	{r7, pc}
 8002830:	01ffffff 	.word	0x01ffffff

08002834 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b094      	sub	sp, #80	; 0x50
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002844:	e0a7      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002848:	3301      	adds	r3, #1
 800284a:	d100      	bne.n	800284e <UART_WaitOnFlagUntilTimeout+0x1a>
 800284c:	e0a3      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7fe f927 	bl	8000aa0 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <UART_WaitOnFlagUntilTimeout+0x30>
 800285e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002860:	2b00      	cmp	r3, #0
 8002862:	d13f      	bne.n	80028e4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002864:	f3ef 8310 	mrs	r3, PRIMASK
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800286c:	647b      	str	r3, [r7, #68]	; 0x44
 800286e:	2301      	movs	r3, #1
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	f383 8810 	msr	PRIMASK, r3
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	494e      	ldr	r1, [pc, #312]	; (80029c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002886:	400a      	ands	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	f383 8810 	msr	PRIMASK, r3
}
 8002894:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002896:	f3ef 8310 	mrs	r3, PRIMASK
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289e:	643b      	str	r3, [r7, #64]	; 0x40
 80028a0:	2301      	movs	r3, #1
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	f383 8810 	msr	PRIMASK, r3
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	438a      	bics	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c2:	f383 8810 	msr	PRIMASK, r3
}
 80028c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2284      	movs	r2, #132	; 0x84
 80028cc:	2120      	movs	r1, #32
 80028ce:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2288      	movs	r2, #136	; 0x88
 80028d4:	2120      	movs	r1, #32
 80028d6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e069      	b.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2204      	movs	r2, #4
 80028ec:	4013      	ands	r3, r2
 80028ee:	d052      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	401a      	ands	r2, r3
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	429a      	cmp	r2, r3
 8002902:	d148      	bne.n	8002996 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290e:	f3ef 8310 	mrs	r3, PRIMASK
 8002912:	613b      	str	r3, [r7, #16]
  return(result);
 8002914:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002918:	2301      	movs	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4924      	ldr	r1, [pc, #144]	; (80029c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002930:	400a      	ands	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002936:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f383 8810 	msr	PRIMASK, r3
}
 800293e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002940:	f3ef 8310 	mrs	r3, PRIMASK
 8002944:	61fb      	str	r3, [r7, #28]
  return(result);
 8002946:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002948:	64bb      	str	r3, [r7, #72]	; 0x48
 800294a:	2301      	movs	r3, #1
 800294c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f383 8810 	msr	PRIMASK, r3
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	438a      	bics	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	f383 8810 	msr	PRIMASK, r3
}
 8002970:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2284      	movs	r2, #132	; 0x84
 8002976:	2120      	movs	r1, #32
 8002978:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2288      	movs	r2, #136	; 0x88
 800297e:	2120      	movs	r1, #32
 8002980:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	228c      	movs	r2, #140	; 0x8c
 8002986:	2120      	movs	r1, #32
 8002988:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e010      	b.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	425a      	negs	r2, r3
 80029a6:	4153      	adcs	r3, r2
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	001a      	movs	r2, r3
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d100      	bne.n	80029b6 <UART_WaitOnFlagUntilTimeout+0x182>
 80029b4:	e747      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b014      	add	sp, #80	; 0x50
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	fffffe5f 	.word	0xfffffe5f

080029c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	5c9b      	ldrb	r3, [r3, r2]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_UARTEx_DisableFifoMode+0x16>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e027      	b.n	8002a2a <HAL_UARTEx_DisableFifoMode+0x66>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	2101      	movs	r1, #1
 80029e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2284      	movs	r2, #132	; 0x84
 80029e6:	2124      	movs	r1, #36	; 0x24
 80029e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	438a      	bics	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2284      	movs	r2, #132	; 0x84
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	2100      	movs	r1, #0
 8002a26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	dfffffff 	.word	0xdfffffff

08002a38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	5c9b      	ldrb	r3, [r3, r2]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e02e      	b.n	8002aae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	2101      	movs	r1, #1
 8002a56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2284      	movs	r2, #132	; 0x84
 8002a5c:	2124      	movs	r1, #36	; 0x24
 8002a5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2101      	movs	r1, #1
 8002a74:	438a      	bics	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	08d9      	lsrs	r1, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 f854 	bl	8002b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2284      	movs	r2, #132	; 0x84
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e02f      	b.n	8002b30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2284      	movs	r2, #132	; 0x84
 8002adc:	2124      	movs	r1, #36	; 0x24
 8002ade:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 f813 	bl	8002b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2284      	movs	r2, #132	; 0x84
 8002b22:	2120      	movs	r1, #32
 8002b24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b004      	add	sp, #16
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	f1ffffff 	.word	0xf1ffffff

08002b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d108      	bne.n	8002b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	226a      	movs	r2, #106	; 0x6a
 8002b50:	2101      	movs	r1, #1
 8002b52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2268      	movs	r2, #104	; 0x68
 8002b58:	2101      	movs	r1, #1
 8002b5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002b5c:	e043      	b.n	8002be6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002b5e:	260f      	movs	r6, #15
 8002b60:	19bb      	adds	r3, r7, r6
 8002b62:	2208      	movs	r2, #8
 8002b64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002b66:	200e      	movs	r0, #14
 8002b68:	183b      	adds	r3, r7, r0
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	0e5b      	lsrs	r3, r3, #25
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	240d      	movs	r4, #13
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2107      	movs	r1, #7
 8002b7e:	400a      	ands	r2, r1
 8002b80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	0f5b      	lsrs	r3, r3, #29
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	250c      	movs	r5, #12
 8002b8e:	197b      	adds	r3, r7, r5
 8002b90:	2107      	movs	r1, #7
 8002b92:	400a      	ands	r2, r1
 8002b94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b96:	183b      	adds	r3, r7, r0
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	197a      	adds	r2, r7, r5
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	4914      	ldr	r1, [pc, #80]	; (8002bf0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002ba0:	5c8a      	ldrb	r2, [r1, r2]
 8002ba2:	435a      	muls	r2, r3
 8002ba4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002ba6:	197b      	adds	r3, r7, r5
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002bac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002bae:	0019      	movs	r1, r3
 8002bb0:	f7fd fb32 	bl	8000218 <__divsi3>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	b299      	uxth	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	226a      	movs	r2, #106	; 0x6a
 8002bbc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002bbe:	19bb      	adds	r3, r7, r6
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	193a      	adds	r2, r7, r4
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	490a      	ldr	r1, [pc, #40]	; (8002bf0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002bc8:	5c8a      	ldrb	r2, [r1, r2]
 8002bca:	435a      	muls	r2, r3
 8002bcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002bd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	f7fd fb1e 	bl	8000218 <__divsi3>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	b299      	uxth	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2268      	movs	r2, #104	; 0x68
 8002be4:	5299      	strh	r1, [r3, r2]
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b005      	add	sp, #20
 8002bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	08002ce0 	.word	0x08002ce0
 8002bf4:	08002ce8 	.word	0x08002ce8

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	4d0c      	ldr	r5, [pc, #48]	; (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1b64      	subs	r4, r4, r5
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	2600      	movs	r6, #0
 8002c0a:	f000 f821 	bl	8002c50 <_init>
 8002c0e:	4d0a      	ldr	r5, [pc, #40]	; (8002c38 <__libc_init_array+0x40>)
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <__libc_init_array+0x44>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	00b3      	lsls	r3, r6, #2
 8002c1e:	58eb      	ldr	r3, [r5, r3]
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	00b3      	lsls	r3, r6, #2
 8002c28:	58eb      	ldr	r3, [r5, r3]
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08002cf8 	.word	0x08002cf8
 8002c34:	08002cf8 	.word	0x08002cf8
 8002c38:	08002cf8 	.word	0x08002cf8
 8002c3c:	08002cfc 	.word	0x08002cfc

08002c40 <memset>:
 8002c40:	0003      	movs	r3, r0
 8002c42:	1882      	adds	r2, r0, r2
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	7019      	strb	r1, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <_init>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr

08002c5c <_fini>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr
